rm(list=ls(all=TRUE))
set.seed(1)
n=10 #bigger n = smaller variance
nobs=1000
ncomm=4
nparam=4
xmat=matrix(runif(ncomm*((nparam)-1),min=-1,max=1),nobs,nparam-1)
colnames(xmat)=paste0('cov',1:(nparam-1))
xmat1=cbind(1,xmat)
param=matrix(runif(nparam*ncomm,max=2),nparam,ncomm)
mean1=exp(xmat1%*%param); range(mean1)
tmp=rnbinom(nobs*ncomm,mu=mean1,size=n)
y=matrix(tmp,nobs,ncomm)
colnames(y)=paste0('y',1:ncomm)
fim=cbind(y,xmat)
setwd('U:\\GIT_models\\git_NB_slice')
write.csv(fim,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\git_NB_slice')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\git_NB_slice')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
#get data
dat=read.csv('fake data.csv',as.is=T)
ind=grep('y',colnames(dat))
y=data.matrix(dat[,ind])
xmat=data.matrix(cbind(1,dat[,-ind]))
#get initial values
ngroup=4
nparam=ncol(xmat)
param=matrix(0,nparam,ngroup)
NBN=10
nloc=nrow(y)
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
var.betas=c(10,rep(1,ncol(xmat)-1))
#to store outcomes from gibbs sampler
betas.out=matrix(NA,ngibbs,nparam*ngroup)
NBN.out=matrix(NA,ngibbs,1)
#useful stuff for slice sampler algorithm
w=0.1
#run gibbs sampler
options(warn=2)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\git_NB_slice')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
#get data
dat=read.csv('fake data.csv',as.is=T)
ind=grep('y',colnames(dat))
y=data.matrix(dat[,ind])
xmat=data.matrix(cbind(1,dat[,-ind]))
#get initial values
ngroup=4
nparam=ncol(xmat)
betas=matrix(0,nparam,ngroup)
NBN=10
nloc=nrow(y)
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
var.betas=c(10,rep(1,ncol(xmat)-1))
#to store outcomes from gibbs sampler
betas.out=matrix(NA,ngibbs,nparam*ngroup)
NBN.out=matrix(NA,ngibbs,1)
#useful stuff for slice sampler algorithm
w=0.1
#run gibbs sampler
options(warn=2)
betas=SampleBetas(param=betas,y=y,xmat=xmat,w=w,nparam=nparam,ncomm=ngroup,var1=var.betas,NBN=NBN)
betas
media=exp(xmat%*%betas) #get mean
NBN=SampleNBN(Media=media,y=nlk,NBN=NBN,w=w)
NBN=SampleNBN(Media=media,y=y,NBN=NBN,w=w)
NBN
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\git_NB_slice')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\git_NB_slice')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('y',colnames(dat))
y=data.matrix(dat[,ind])
xmat=data.matrix(cbind(1,dat[,-ind]))
#get initial values
ngroup=4
nparam=ncol(xmat)
betas=matrix(0,nparam,ngroup)
NBN=10
nloc=nrow(y)
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
var.betas=c(10,rep(1,ncol(xmat)-1))
#to store outcomes from gibbs sampler
betas.out=matrix(NA,ngibbs,nparam*ngroup)
NBN.out=matrix(NA,ngibbs,1)
#useful stuff for slice sampler algorithm
w=0.1
#run gibbs sampler
options(warn=2)
for (i in 1:ngibbs){
print(i)
#sample betas
betas=SampleBetas(param=betas,y=y,xmat=xmat,w=w,nparam=nparam,ncomm=ngroup,var1=var.betas,NBN=NBN)
#sample NBN
media=exp(xmat%*%betas) #get mean
NBN=SampleNBN(Media=media,y=y,NBN=NBN,w=w)
#store results
betas.out[i,]=betas
NBN.out[i]=NBN
}
plot(NBN.out,type='l')
set.seed(1)
n=10 #bigger n = smaller variance
nobs=1000
ncomm=4
nparam=4
xmat=matrix(runif(ncomm*((nparam)-1),min=-1,max=1),nobs,nparam-1)
colnames(xmat)=paste0('cov',1:(nparam-1))
xmat1=cbind(1,xmat)
betas.true=param=matrix(runif(nparam*ncomm,max=2),nparam,ncomm)
mean1=exp(xmat1%*%param); range(mean1)
plot(betas.true,betas)
rango=range(c(betas.true,betas))
plot(betas.true,betas,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
rm(list=ls(all=TRUE))
set.seed(2)
n=100 #bigger n = smaller variance
nobs=1000
ncomm=4
nparam=4
xmat=matrix(runif(ncomm*((nparam)-1),min=-1,max=1),nobs,nparam-1)
colnames(xmat)=paste0('cov',1:(nparam-1))
xmat1=cbind(1,xmat)
betas.true=param=matrix(runif(nparam*ncomm,max=2),nparam,ncomm)
mean1=exp(xmat1%*%param); range(mean1)
tmp=rnbinom(nobs*ncomm,mu=mean1,size=n)
y=matrix(tmp,nobs,ncomm)
colnames(y)=paste0('y',1:ncomm)
fim=cbind(y,xmat)
setwd('U:\\GIT_models\\git_NB_slice')
write.csv(fim,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\git_NB_slice')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
#get data
dat=read.csv('fake data.csv',as.is=T)
ind=grep('y',colnames(dat))
y=data.matrix(dat[,ind])
xmat=data.matrix(cbind(1,dat[,-ind]))
#get initial values
ngroup=4
nparam=ncol(xmat)
betas=matrix(0,nparam,ngroup)
NBN=10
nloc=nrow(y)
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
var.betas=c(10,rep(1,ncol(xmat)-1))
#to store outcomes from gibbs sampler
betas.out=matrix(NA,ngibbs,nparam*ngroup)
NBN.out=matrix(NA,ngibbs,1)
#useful stuff for slice sampler algorithm
w=0.1
#run gibbs sampler
options(warn=2)
for (i in 1:ngibbs){
print(i)
#sample betas
betas=SampleBetas(param=betas,y=y,xmat=xmat,w=w,nparam=nparam,ncomm=ngroup,var1=var.betas,NBN=NBN)
#sample NBN
media=exp(xmat%*%betas) #get mean
NBN=SampleNBN(Media=media,y=y,NBN=NBN,w=w)
#store results
betas.out[i,]=betas
NBN.out[i]=NBN
}
plot(NBN.out,type='l')
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(1)
#get functions
setwd('U:\\GIT_models\\git_NB_slice')
sourceCpp('slice_betas.cpp')
sourceCpp('slice_NBN.cpp')
#get data
dat=read.csv('fake data.csv',as.is=T)
ind=grep('y',colnames(dat))
y=data.matrix(dat[,ind])
xmat=data.matrix(cbind(1,dat[,-ind]))
#get initial values
ngroup=4
nparam=ncol(xmat)
betas=matrix(0,nparam,ngroup)
NBN=10
nloc=nrow(y)
#basic settings
ngibbs=1000
nburn=ngibbs/2
#priors
var.betas=c(10,rep(1,ncol(xmat)-1))
#to store outcomes from gibbs sampler
betas.out=matrix(NA,ngibbs,nparam*ngroup)
NBN.out=matrix(NA,ngibbs,1)
#useful stuff for slice sampler algorithm
w.betas=0.1
w.NBN=10
#run gibbs sampler
options(warn=2)
for (i in 1:ngibbs){
print(i)
#sample betas
betas=SampleBetas(param=betas,y=y,xmat=xmat,w=w.betas,nparam=nparam,ncomm=ngroup,var1=var.betas,NBN=NBN)
#sample NBN
media=exp(xmat%*%betas) #get mean
NBN=SampleNBN(Media=media,y=y,NBN=NBN,w=w.NBN)
#store results
betas.out[i,]=betas
NBN.out[i]=NBN
}
plot(NBN.out,type='l')
mean(NBN.out)
quantile(NBN.out,c(0.025,0.5,0.975))
set.seed(2)
n=100 #bigger n = smaller variance
nobs=1000
ncomm=4
nparam=4
xmat=matrix(runif(ncomm*((nparam)-1),min=-1,max=1),nobs,nparam-1)
colnames(xmat)=paste0('cov',1:(nparam-1))
xmat1=cbind(1,xmat)
betas.true=param=matrix(runif(nparam*ncomm,max=2),nparam,ncomm)
mean1=exp(xmat1%*%param); range(mean1)
tmp=rnbinom(nobs*ncomm,mu=mean1,size=n)
y=matrix(tmp,nobs,ncomm)
colnames(y)=paste0('y',1:ncomm)
fim=cbind(y,xmat)
rango=range(c(betas.true,betas))
plot(betas.true,betas,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
